library(MCMCpack)
install.packages("MCMCpack")
library(MCMCpack)
fit.bayes<-MCMCregress(impair~life + ses,mcmc=5000000,b0=0,B0=10^(-10),c0=10^(-10),d0=10^(-10),data=Mental)
Mental <-read.table("http://stat4ds.rwth-aachen.de/data/Mental.dat", header=TRUE)
summary(lm(impair~life+ses, data=Mental)) #least squares
fit.bayes<-MCMCregress(impair~life + ses,mcmc=5000000,b0=0,B0=10^(-10),c0=10^(-10),d0=10^(-10),data=Mental)
summary(fit.bayes) # normal priors with means=b0, variances=1/B0
fit.bayes
fit.bayes[,2]
fit.bayes[,1]
mean(fit.bayes[,2]<=0);mean(fit.bayes[,3]>= 0)
fit.bayes[1,]
fit.bayes[1, 1:100]
fit.bayes[1, 1:10]
fit.bayes[1, :]
fit.bayes[1, c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)]
fit.bayes[1, 2]
fit.bayes[1, 1]
fit.bayes[1]
fit.bayes[1, ]
fit.bayes[c(1, 2, 3), ]
?seq
fit.bayes[seq(1, 100, by = 1), ]
?runif
## Q1.
draw.from.fun <- function (){
while (1){
unif <- runif(2, min = -2, max = 2)
test.quant <- (unif[1]^2) + (unif[2]^2)
if (1 <= test.quant && 4 >= test.quant){
return(unif)
}
}
}
draw.from.fun()
draw.from.fun()
draw.from.fun()
n <- 1000
x <- numeric(length = n)
y <- numeric(length = n)
for (i in 1:n){
samp <- draw.from.fun()
x[i] <- samp[1]
y[i] <- samp[2]
}
plot(x, y)
?plot
n <- 10000
x <- numeric(length = n)
y <- numeric(length = n)
for (i in 1:n){
samp <- draw.from.fun()
x[i] <- samp[1]
y[i] <- samp[2]
}
plot(x, y, )
?abs
fav.count <- 0
for (i in 1:n){
if ((abs(x) + abs(y)) >= 2){
fav.count <- fav.count + 1
}
}
warnings()
fav.count <- 0
for (i in 1:n){
if ((abs(x[i]) + abs(y[i])) >= 2){
fav.count <- fav.count + 1
}
}
fav.count/n
n <- 100000
x <- numeric(length = n)
y <- numeric(length = n)
for (i in 1:n){
samp <- draw.from.fun()
x[i] <- samp[1]
y[i] <- samp[2]
}
fav.count <- 0
for (i in 1:n){
if ((abs(x[i]) + abs(y[i])) >= 2){
fav.count <- fav.count + 1
}
}
fav.count/n
?rgamma
## Question 2:
n <- 1000
rgamma(n, shape = 0.5, scale = 0.7)
samps <- rgamma(n, shape = 0.5, scale = 0.7)
## Question 2:
n <- 1000
samps <- rgamma(n, shape = 0.5, scale = 0.7)
sqrt(1 + (samps^2))
sum(sqrt(1 + (samps^2)) * dgamma(samps))
samps <- rgamma(n, shape = 0.5, scale = 0.7)
## Question 2:
n <- 1000
samps <- rgamma(n, shape = 0.5, scale = 0.7)
sum(sqrt(1 + (samps^2)) * dgamma(samps, shape = 0.5, scale = 0.7))
dgamma(samps, shape = 0.5, scale = 0.7)
sum(sqrt(1 + (samps^2))/n
/
\
sum(sqrt(1 + (samps^2)))/n
library(MCMCpack)
?mcmc
?t.test()
getwd()
setwd("/home/aashi/Desktop/GDP_forecasting/")
library(RColorBrewer)
library(MLmetrics)
library(forecast)
library(caret)
coun <- read.csv("266_country.csv")
ind <- subset(coun,coun$Country.Code=="IND")
getwd()
india_update <- read.csv("india_update - Sheet1.csv")
india_update <- india_update[,-1] # removing serial number
#india_update <- cbind(india_update,india_t[,10]) #adding GDP
#colnames(india_update)[10] <- "GDP"
#india_update <- india_update[,-4] # removing export of goods and services becoz net barter term index is similiar.
#plotting GDP with selected parameters;
for( i in 2:9){
plot(india_update[,10],india_update[,i], xlab = "GDP",ylab = colnames(india_update)[i]  ,pch = 16,col= rainbow(10),type="b")
legend("topright", legend = c("2012","2013","2014","2015","2016","2017","2018","2019","2020","2021"),fill = rainbow(10),cex = 0.4)
}
final <- lm(india_update[,9]~ india_update[,2]+india_update[,3]+india_update[,4]+india_update[,5],data = india_update)
t_gdp <- ts(india_update[,9],frequency = 1,start = 2012,end = 2021)
ddata <- decompose(t_gdp, "additive")
start(india_update[,9])
#ARIMA modelend
m_series <- auto.arima(india_update[,9])
#If not already installed
library(vars)
library(astsa)
library(plotly)
GDP <- ts(india_update[,9],start = c(2009,1),end = c(2021,1),frequency = 1)
#plotting time series of GDP from 2009-2021
plot(GDP)
#trying to remove seasoning
c2 <- diff(data[,2], differences = 2)
c2_d2d12 <- diff(c2, lag = 10)
#PLOTTING TIME series graph for co-variants : x1....x7
data <- india_update[,2:8]
colnames(data) <- c("c1","c2","c3","c4","c5","c6","c7")
par(mfrow=c(4, 2))
for( i in 2:8){
obj_ts <- ts(india_update[,i],start = c(2009,1),end = c(2021,1))
#cov_arima[i-1] <- Arima(data[,i],seasonal = FALSE,order = c(1,0,0),method="ML")
plot.ts(obj_ts,xlab="years",ylab=i,col=i,plot.type = "multiple")
}
#data[,2]<- data[,2]/100000000
data[,c(1,2,3,4,5,6)] <- round(data[,c(1,2,3,4,5,6)],2)
mu <- sapply(data,mean)
sd <- sapply(data, sd)
# using VAR model
#making dimensions same for means and sd (13*7 matrix)
mu_mat <- matrix(rep(c(2.764231e+01,3.972745e+10, 8.806923e+00 ,3.331308e+01 ,9.727692e+01, 1.044308e+01, 5.660769e+00),13),ncol = 7,nrow = 13,byrow = TRUE)
sd_mat <- matrix(rep(c(2.192184e+00,1.074120e+10,1.191339e+00,6.190198e+00,5.722100e+00,4.131082e+00,7.235844e-01 ),13),ncol = 7,nrow = 13,byrow = TRUE)
data_update <- (data - mu_mat)/sd_mat
data_update<- round(data_update,3)
modelvar <- VAR(data_update[,c(1,2,3,4,5,6)],p=1,type = "const" )
#dependency of other covariants over other is non-significants, we won'nt use VAR.
summary(modelvar)
indepen_test<- function(x1,x2,x3,x4){
a<- abs(x1-x2)+abs(x3-x4)-abs(x1-x3)-abs(x2-x4)
return(a)
}
value1 <- numeric(length = 10)
value2 <- numeric(length = 10)
final <- matrix(data = NA,nrow =715,ncol = 1)
combin_out <- read.csv("output_combination.csv")
mat_combin <- as.matrix(combin_out)
mat_combin <- rbind(c(1,2,3,4),mat_combin)
add <- matrix(data = NA)
inde <- matrix(data = NA)
for(k in 1:6){
for(j in (k+1):7){
for(i in 1:dim(mat_combin)[1]){
index <- mat_combin[i,1:4]
value1 <- indepen_test(data_update[index[[1]],k],data_update[index[[2]],k],data_update[index[[3]],k],data_update[index[[4]],k])
value2 <- indepen_test(data_update[index[[1]],j],data_update[index[[2]],j],data_update[index[[3]],j],data_update[index[[4]],j])
final[i]<- value1*value2
}
print(c(k,j))
print((sum(final)/(715*4))) #13c4
}
}
View((data_update))
getwd()
india_update <- read.csv("india_update - Sheet1.csv")
india_update <- india_update[,-1] # removing serial number
#india_update <- cbind(india_update,india_t[,10]) #adding GDP
#colnames(india_update)[10] <- "GDP"
#india_update <- india_update[,-4] # removing export of goods and services becoz net barter term index is similiar.
#plotting GDP with selected parameters;
for( i in 2:9){
plot(india_update[,10],india_update[,i], xlab = "GDP",ylab = colnames(india_update)[i]  ,pch = 16,col= rainbow(10),type="b")
legend("topright", legend = c("2012","2013","2014","2015","2016","2017","2018","2019","2020","2021"),fill = rainbow(10),cex = 0.4)
}
final <- lm(india_update[,9]~ india_update[,2]+india_update[,3]+india_update[,4]+india_update[,5],data = india_update)
t_gdp <- ts(india_update[,9],frequency = 1,start = 2012,end = 2021)
ddata <- decompose(t_gdp, "additive")
start(india_update[,9])
#ARIMA modelend
m_series <- auto.arima(india_update[,9])
#If not already installed
library(vars)
library(astsa)
library(plotly)
GDP <- ts(india_update[,9],start = c(2009,1),end = c(2021,1),frequency = 1)
#plotting time series of GDP from 2009-2021
plot(GDP)
#trying to remove seasoning
c2 <- diff(data[,2], differences = 2)
c2_d2d12 <- diff(c2, lag = 10)
#PLOTTING TIME series graph for co-variants : x1....x7
data <- india_update[,2:8]
colnames(data) <- c("c1","c2","c3","c4","c5","c6","c7")
par(mfrow=c(4, 2))
for( i in 2:8){
obj_ts <- ts(india_update[,i],start = c(2009,1),end = c(2021,1))
#cov_arima[i-1] <- Arima(data[,i],seasonal = FALSE,order = c(1,0,0),method="ML")
plot.ts(obj_ts,xlab="years",ylab=i,col=i,plot.type = "multiple")
}
#data[,2]<- data[,2]/100000000
data[,c(1,2,3,4,5,6)] <- round(data[,c(1,2,3,4,5,6)],2)
mu <- sapply(data,mean)
sd <- sapply(data, sd)
# using VAR model
#making dimensions same for means and sd (13*7 matrix)
mu_mat <- matrix(rep(c(2.764231e+01,3.972745e+10, 8.806923e+00 ,3.331308e+01 ,9.727692e+01, 1.044308e+01, 5.660769e+00),13),ncol = 7,nrow = 13,byrow = TRUE)
sd_mat <- matrix(rep(c(2.192184e+00,1.074120e+10,1.191339e+00,6.190198e+00,5.722100e+00,4.131082e+00,7.235844e-01 ),13),ncol = 7,nrow = 13,byrow = TRUE)
data_update <- (data - mu_mat)/sd_mat
data_update<- round(data_update,3)
modelvar <- VAR(data_update[,c(1,2,3,4,5,6)],p=1,type = "const" )
#dependency of other covariants over other is non-significants, we won'nt use VAR.
summary(modelvar)
indepen_test<- function(x1,x2,x3,x4){
a<- abs(x1-x2)+abs(x3-x4)-abs(x1-x3)-abs(x2-x4)
return(a)
}
value1 <- numeric(length = 10)
value2 <- numeric(length = 10)
final <- matrix(data = NA,nrow =715,ncol = 1)
combin_out <- read.csv("output_combination.csv")
mat_combin <- as.matrix(combin_out)
indepen_test<- function(x1,x2,x3,x4){
a<- abs(x1-x2)+abs(x3-x4)-abs(x1-x3)-abs(x2-x4)
return(a)
}
value1 <- numeric(length = 10)
value2 <- numeric(length = 10)
final <- matrix(data = NA,nrow =715,ncol = 1)
combin_out <- read.csv("output_combination.csv")
mat_combin <- as.matrix(combin_out)
mat_combin <- rbind(c(1,2,3,4),mat_combin)
add <- matrix(data = NA)
inde <- matrix(data = NA)
for(k in 1:6){
for(j in (k+1):7){
for(i in 1:dim(mat_combin)[1]){
index <- mat_combin[i,1:4]
value1 <- indepen_test(data_update[index[[1]],k],data_update[index[[2]],k],data_update[index[[3]],k],data_update[index[[4]],k])
value2 <- indepen_test(data_update[index[[1]],j],data_update[index[[2]],j],data_update[index[[3]],j],data_update[index[[4]],j])
final[i]<- value1*value2
}
print(c(k,j))
print((sum(final)/(715*4))) #13c4
}
}
#data[,2]<- data[,2]/100000000
data[,c(1,2,3,4,5,6)] <- round(data[,c(1,2,3,4,5,6)],2)
mu <- sapply(data,mean)
sd <- sapply(data, sd)
# using VAR model
#making dimensions same for means and sd (13*7 matrix)
mu_mat <- matrix(rep(c(2.764231e+01,3.972745e+10, 8.806923e+00 ,3.331308e+01 ,9.727692e+01, 1.044308e+01, 5.660769e+00),13),ncol = 7,nrow = 13,byrow = TRUE)
sd_mat <- matrix(rep(c(2.192184e+00,1.074120e+10,1.191339e+00,6.190198e+00,5.722100e+00,4.131082e+00,7.235844e-01 ),13),ncol = 7,nrow = 13,byrow = TRUE)
data_update <- (data - mu_mat)/sd_mat
data_update<- round(data_update,3)
modelvar <- VAR(data_update[,c(1,2,3,4,5,6)],p=1,type = "const" )
#PLOTTING TIME series graph for co-variants : x1....x7
data <- india_update[,2:8]
View(data)
india_update <- read.csv("india_update - Sheet1.csv")
india_update <- india_update[,-1] # removing serial number
india_update
View(india_update)
india_update <- read.csv("india_update - Sheet1.csv")
india_update <- india_update[,-1] # removing serial number
india_update
View(india_update)
india <- read.csv("india.csv")
View(india)
